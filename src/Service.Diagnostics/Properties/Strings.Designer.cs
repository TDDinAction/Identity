// <auto-generated />
namespace Microsoft.AspNetCore.Diagnostics.Identity.Service
{
    using System.Globalization;
    using System.Reflection;
    using System.Resources;

    internal static class Strings
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("Microsoft.AspNetCore.Diagnostics.Identity.Service.Strings", typeof(Strings).GetTypeInfo().Assembly);

        /// <summary>
        /// Developer certificate
        /// </summary>
        internal static string CertificateErrorPage_Title
        {
            get => GetString("CertificateErrorPage_Title");
        }

        /// <summary>
        /// Developer certificate
        /// </summary>
        internal static string FormatCertificateErrorPage_Title()
            => GetString("CertificateErrorPage_Title");

        /// <summary>
        /// Create certificate
        /// </summary>
        internal static string CreateCertificate
        {
            get => GetString("CreateCertificate");
        }

        /// <summary>
        /// Create certificate
        /// </summary>
        internal static string FormatCreateCertificate()
            => GetString("CreateCertificate");

        /// <summary>
        /// Done
        /// </summary>
        internal static string CreateCertificateDone
        {
            get => GetString("CreateCertificateDone");
        }

        /// <summary>
        /// Done
        /// </summary>
        internal static string FormatCreateCertificateDone()
            => GetString("CreateCertificateDone");

        /// <summary>
        /// Certificate creation failed.
        /// </summary>
        internal static string CreateCertificateFailed
        {
            get => GetString("CreateCertificateFailed");
        }

        /// <summary>
        /// Certificate creation failed.
        /// </summary>
        internal static string FormatCreateCertificateFailed()
            => GetString("CreateCertificateFailed");

        /// <summary>
        /// Certificate creation succeeded. Try refreshing the page.
        /// </summary>
        internal static string CreateCertificateRefresh
        {
            get => GetString("CreateCertificateRefresh");
        }

        /// <summary>
        /// Certificate creation succeeded. Try refreshing the page.
        /// </summary>
        internal static string FormatCreateCertificateRefresh()
            => GetString("CreateCertificateRefresh");

        /// <summary>
        /// Creating developer certificate...
        /// </summary>
        internal static string CreateCertificateRunning
        {
            get => GetString("CreateCertificateRunning");
        }

        /// <summary>
        /// Creating developer certificate...
        /// </summary>
        internal static string FormatCreateCertificateRunning()
            => GetString("CreateCertificateRunning");

        /// <summary>
        /// Identity requires a certificate to sign tokens. You can create a developer certificate by clicking the Create Certificate button to generate a developer certificate for you automatically. This will create a self-signed certificate with subject IdentityService.Development and will add it to your current user personal store.
        ///     Alternatively, you can create this certificate manually with the instructions given in the following link:
        ///     
        /// </summary>
        internal static string ManualCertificateGenerationInfo
        {
            get => GetString("ManualCertificateGenerationInfo");
        }

        /// <summary>
        /// Identity requires a certificate to sign tokens. You can create a developer certificate by clicking the Create Certificate button to generate a developer certificate for you automatically. This will create a self-signed certificate with subject IdentityService.Development and will add it to your current user personal store.
        ///     Alternatively, you can create this certificate manually with the instructions given in the following link:
        ///     
        /// </summary>
        internal static string FormatManualCertificateGenerationInfo()
            => GetString("ManualCertificateGenerationInfo");

        /// <summary>
        /// https://go.microsoft.com/fwlink/?linkid=848037
        /// </summary>
        internal static string ManualCertificateGenerationInfoLink
        {
            get => GetString("ManualCertificateGenerationInfoLink");
        }

        /// <summary>
        /// https://go.microsoft.com/fwlink/?linkid=848037
        /// </summary>
        internal static string FormatManualCertificateGenerationInfoLink()
            => GetString("ManualCertificateGenerationInfoLink");

        /// <summary>
        /// The developer certificate is missing or invalid
        /// </summary>
        internal static string MissingOrInvalidCertificate
        {
            get => GetString("MissingOrInvalidCertificate");
        }

        /// <summary>
        /// The developer certificate is missing or invalid
        /// </summary>
        internal static string FormatMissingOrInvalidCertificate()
            => GetString("MissingOrInvalidCertificate");

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            System.Diagnostics.Debug.Assert(value != null);

            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
